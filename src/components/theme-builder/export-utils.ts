import { ThemeExport } from '@/types/schema';

export function exportToJSON(theme: ThemeExport): void {
  const dataStr = JSON.stringify(theme, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = `${theme.themeName || 'material-theme'}.json`;
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export function exportToDart(theme: ThemeExport): void {
  const dartCode = generateDartCode(theme);
  const dataBlob = new Blob([dartCode], { type: 'text/plain' });
  
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = `${theme.themeName || 'material-theme'}.dart`;
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

function generateDartCode(theme: ThemeExport): string {
  const hexToInt = (hex: string): string => {
    return `0xFF${hex.substring(1).toUpperCase()}`;
  };

  // Helper function to get extended color by name
  const getExtendedHex = (name: string): string => {
    const found = theme.extendedColors.find(ec => ec.name === name);
    return found?.color || '#FFFFFF';
  };

  // Generate tag colors for Dart code
  const generateTagColors = (scheme: 'light' | 'dark'): string => {
    const tagNames = ['blue', 'cyan', 'geekblue', 'gold', 'green', 'lime', 'magenta', 'orange', 'purple', 'red', 'volcano'];
    
    return tagNames.map(tagName => `    ${tagName}TagText: Color(${hexToInt(getExtendedHex(`${tagName}TagText`))}),
    ${tagName}TagBackground: Color(${hexToInt(getExtendedHex(`${tagName}TagBackground`))}),
    ${tagName}TagBorder: Color(${hexToInt(getExtendedHex(`${tagName}TagBorder`))}),`).join('\n');
  };

  return `// Generated by Material Theme Builder
// Theme: ${theme.themeName || 'Custom Material Theme'}
// Seed: ${theme.seed}

import 'package:flutter/material.dart';

class ${(theme.themeName || 'Custom').replace(/\s+/g, '')}Theme {
  static const String seed = '${theme.seed}';
  
  // Light Color Scheme
  static const ColorScheme lightColorScheme = ColorScheme.light(
    primary: Color(${hexToInt(theme.schemes.light.primary)}),
    onPrimary: Color(${hexToInt(theme.schemes.light.onPrimary)}),
    primaryContainer: Color(${hexToInt(theme.schemes.light.primaryContainer)}),
    onPrimaryContainer: Color(${hexToInt(theme.schemes.light.onPrimaryContainer)}),
    secondary: Color(${hexToInt(theme.schemes.light.secondary)}),
    onSecondary: Color(${hexToInt(theme.schemes.light.onSecondary)}),
    secondaryContainer: Color(${hexToInt(theme.schemes.light.secondaryContainer)}),
    onSecondaryContainer: Color(${hexToInt(theme.schemes.light.onSecondaryContainer)}),
    tertiary: Color(${hexToInt(theme.schemes.light.tertiary)}),
    onTertiary: Color(${hexToInt(theme.schemes.light.onTertiary)}),
    tertiaryContainer: Color(${hexToInt(theme.schemes.light.tertiaryContainer)}),
    onTertiaryContainer: Color(${hexToInt(theme.schemes.light.onTertiaryContainer)}),
    error: Color(${hexToInt(theme.schemes.light.error)}),
    onError: Color(${hexToInt(theme.schemes.light.onError)}),
    errorContainer: Color(${hexToInt(theme.schemes.light.errorContainer)}),
    onErrorContainer: Color(${hexToInt(theme.schemes.light.onErrorContainer)}),
    surface: Color(${hexToInt(theme.schemes.light.surface)}),
    onSurface: Color(${hexToInt(theme.schemes.light.onSurface)}),
    surfaceVariant: Color(${hexToInt(theme.schemes.light.surfaceVariant)}),
    onSurfaceVariant: Color(${hexToInt(theme.schemes.light.onSurfaceVariant)}),
    surfaceDim: Color(${hexToInt(theme.schemes.light.surfaceDim)}),
    surfaceBright: Color(${hexToInt(theme.schemes.light.surfaceBright)}),
    surfaceContainer: Color(${hexToInt(theme.schemes.light.surfaceContainer)}),
    surfaceContainerLow: Color(${hexToInt(theme.schemes.light.surfaceContainerLow)}),
    surfaceContainerHigh: Color(${hexToInt(theme.schemes.light.surfaceContainerHigh)}),
    surfaceContainerHighest: Color(${hexToInt(theme.schemes.light.surfaceContainerHighest)}),
    background: Color(${hexToInt(theme.schemes.light.background)}),
    onBackground: Color(${hexToInt(theme.schemes.light.onBackground)}),
    outline: Color(${hexToInt(theme.schemes.light.outline)}),
    outlineVariant: Color(${hexToInt(theme.schemes.light.outlineVariant)}),
  );

  // Dark Color Scheme
  static const ColorScheme darkColorScheme = ColorScheme.dark(
    primary: Color(${hexToInt(theme.schemes.dark.primary)}),
    onPrimary: Color(${hexToInt(theme.schemes.dark.onPrimary)}),
    primaryContainer: Color(${hexToInt(theme.schemes.dark.primaryContainer)}),
    onPrimaryContainer: Color(${hexToInt(theme.schemes.dark.onPrimaryContainer)}),
    secondary: Color(${hexToInt(theme.schemes.dark.secondary)}),
    onSecondary: Color(${hexToInt(theme.schemes.dark.onSecondary)}),
    secondaryContainer: Color(${hexToInt(theme.schemes.dark.secondaryContainer)}),
    onSecondaryContainer: Color(${hexToInt(theme.schemes.dark.onSecondaryContainer)}),
    tertiary: Color(${hexToInt(theme.schemes.dark.tertiary)}),
    onTertiary: Color(${hexToInt(theme.schemes.dark.onTertiary)}),
    tertiaryContainer: Color(${hexToInt(theme.schemes.dark.tertiaryContainer)}),
    onTertiaryContainer: Color(${hexToInt(theme.schemes.dark.onTertiaryContainer)}),
    error: Color(${hexToInt(theme.schemes.dark.error)}),
    onError: Color(${hexToInt(theme.schemes.dark.onError)}),
    errorContainer: Color(${hexToInt(theme.schemes.dark.errorContainer)}),
    onErrorContainer: Color(${hexToInt(theme.schemes.dark.onErrorContainer)}),
    surface: Color(${hexToInt(theme.schemes.dark.surface)}),
    onSurface: Color(${hexToInt(theme.schemes.dark.onSurface)}),
    surfaceVariant: Color(${hexToInt(theme.schemes.dark.surfaceVariant)}),
    onSurfaceVariant: Color(${hexToInt(theme.schemes.dark.onSurfaceVariant)}),
    surfaceDim: Color(${hexToInt(theme.schemes.dark.surfaceDim)}),
    surfaceBright: Color(${hexToInt(theme.schemes.dark.surfaceBright)}),
    surfaceContainer: Color(${hexToInt(theme.schemes.dark.surfaceContainer)}),
    surfaceContainerLow: Color(${hexToInt(theme.schemes.dark.surfaceContainerLow)}),
    surfaceContainerHigh: Color(${hexToInt(theme.schemes.dark.surfaceContainerHigh)}),
    surfaceContainerHighest: Color(${hexToInt(theme.schemes.dark.surfaceContainerHighest)}),
    background: Color(${hexToInt(theme.schemes.dark.background)}),
    onBackground: Color(${hexToInt(theme.schemes.dark.onBackground)}),
    outline: Color(${hexToInt(theme.schemes.dark.outline)}),
    outlineVariant: Color(${hexToInt(theme.schemes.dark.outlineVariant)}),
  );

  // Light Theme Data
  static ThemeData get lightTheme => ThemeData(
    useMaterial3: true,
    colorScheme: lightColorScheme,
    extensions: [lightExtendedTheme],
  );

  // Dark Theme Data
  static ThemeData get darkTheme => ThemeData(
    useMaterial3: true,
    colorScheme: darkColorScheme,
    extensions: [darkExtendedTheme],
  );

  // Extended Theme Extensions
  static const ExtendedTheme lightExtendedTheme = ExtendedTheme(
    // Semantic colors
    defaultColor: Color(${hexToInt(getExtendedHex('defaultColor'))}),
    onDefault: Color(${hexToInt(getExtendedHex('onDefault'))}),
    defaultContainer: Color(${hexToInt(getExtendedHex('defaultContainer'))}),
    onDefaultContainer: Color(${hexToInt(getExtendedHex('onDefaultContainer'))}),
    success: Color(${hexToInt(getExtendedHex('success'))}),
    onSuccess: Color(${hexToInt(getExtendedHex('onSuccess'))}),
    successContainer: Color(${hexToInt(getExtendedHex('successContainer'))}),
    onSuccessContainer: Color(${hexToInt(getExtendedHex('onSuccessContainer'))}),
    warning: Color(${hexToInt(getExtendedHex('warning'))}),
    onWarning: Color(${hexToInt(getExtendedHex('onWarning'))}),
    warningContainer: Color(${hexToInt(getExtendedHex('warningContainer'))}),
    onWarningContainer: Color(${hexToInt(getExtendedHex('onWarningContainer'))}),
    information: Color(${hexToInt(getExtendedHex('information'))}),
    onInformation: Color(${hexToInt(getExtendedHex('onInformation'))}),
    informationContainer: Color(${hexToInt(getExtendedHex('informationContainer'))}),
    onInformationContainer: Color(${hexToInt(getExtendedHex('onInformationContainer'))}),
    critical: Color(${hexToInt(getExtendedHex('critical'))}),
    onCritical: Color(${hexToInt(getExtendedHex('onCritical'))}),
    criticalContainer: Color(${hexToInt(getExtendedHex('criticalContainer'))}),
    onCriticalContainer: Color(${hexToInt(getExtendedHex('onCriticalContainer'))}),
    // Tag colors
${generateTagColors('light')}
  );

  static const ExtendedTheme darkExtendedTheme = ExtendedTheme(
    // Semantic colors
    defaultColor: Color(${hexToInt(getExtendedHex('defaultColor'))}),
    onDefault: Color(${hexToInt(getExtendedHex('onDefault'))}),
    defaultContainer: Color(${hexToInt(getExtendedHex('defaultContainer'))}),
    onDefaultContainer: Color(${hexToInt(getExtendedHex('onDefaultContainer'))}),
    success: Color(${hexToInt(getExtendedHex('success'))}),
    onSuccess: Color(${hexToInt(getExtendedHex('onSuccess'))}),
    successContainer: Color(${hexToInt(getExtendedHex('successContainer'))}),
    onSuccessContainer: Color(${hexToInt(getExtendedHex('onSuccessContainer'))}),
    warning: Color(${hexToInt(getExtendedHex('warning'))}),
    onWarning: Color(${hexToInt(getExtendedHex('onWarning'))}),
    warningContainer: Color(${hexToInt(getExtendedHex('warningContainer'))}),
    onWarningContainer: Color(${hexToInt(getExtendedHex('onWarningContainer'))}),
    information: Color(${hexToInt(getExtendedHex('information'))}),
    onInformation: Color(${hexToInt(getExtendedHex('onInformation'))}),
    informationContainer: Color(${hexToInt(getExtendedHex('informationContainer'))}),
    onInformationContainer: Color(${hexToInt(getExtendedHex('onInformationContainer'))}),
    critical: Color(${hexToInt(getExtendedHex('critical'))}),
    onCritical: Color(${hexToInt(getExtendedHex('onCritical'))}),
    criticalContainer: Color(${hexToInt(getExtendedHex('criticalContainer'))}),
    onCriticalContainer: Color(${hexToInt(getExtendedHex('onCriticalContainer'))}),
    // Tag colors
${generateTagColors('dark')}
  );
}

// Extended Theme Extension Class
class ExtendedTheme extends ThemeExtension<ExtendedTheme> {
  const ExtendedTheme({
    // Semantic colors
    required this.defaultColor,
    required this.onDefault,
    required this.defaultContainer,
    required this.onDefaultContainer,
    required this.success,
    required this.onSuccess,
    required this.successContainer,
    required this.onSuccessContainer,
    required this.warning,
    required this.onWarning,
    required this.warningContainer,
    required this.onWarningContainer,
    required this.information,
    required this.onInformation,
    required this.informationContainer,
    required this.onInformationContainer,
    required this.critical,
    required this.onCritical,
    required this.criticalContainer,
    required this.onCriticalContainer,
    // Tag colors
    required this.blueTagText,
    required this.blueTagBackground,
    required this.blueTagBorder,
    required this.cyanTagText,
    required this.cyanTagBackground,
    required this.cyanTagBorder,
    required this.geekblueTagText,
    required this.geekblueTagBackground,
    required this.geekblueTagBorder,
    required this.goldTagText,
    required this.goldTagBackground,
    required this.goldTagBorder,
    required this.greenTagText,
    required this.greenTagBackground,
    required this.greenTagBorder,
    required this.limeTagText,
    required this.limeTagBackground,
    required this.limeTagBorder,
    required this.magentaTagText,
    required this.magentaTagBackground,
    required this.magentaTagBorder,
    required this.orangeTagText,
    required this.orangeTagBackground,
    required this.orangeTagBorder,
    required this.purpleTagText,
    required this.purpleTagBackground,
    required this.purpleTagBorder,
    required this.redTagText,
    required this.redTagBackground,
    required this.redTagBorder,
    required this.volcanoTagText,
    required this.volcanoTagBackground,
    required this.volcanoTagBorder,
  });

  // Semantic colors
  final Color defaultColor;
  final Color onDefault;
  final Color defaultContainer;
  final Color onDefaultContainer;
  final Color success;
  final Color onSuccess;
  final Color successContainer;
  final Color onSuccessContainer;
  final Color warning;
  final Color onWarning;
  final Color warningContainer;
  final Color onWarningContainer;
  final Color information;
  final Color onInformation;
  final Color informationContainer;
  final Color onInformationContainer;
  final Color critical;
  final Color onCritical;
  final Color criticalContainer;
  final Color onCriticalContainer;

  // Tag colors
  final Color blueTagText;
  final Color blueTagBackground;
  final Color blueTagBorder;
  final Color cyanTagText;
  final Color cyanTagBackground;
  final Color cyanTagBorder;
  final Color geekblueTagText;
  final Color geekblueTagBackground;
  final Color geekblueTagBorder;
  final Color goldTagText;
  final Color goldTagBackground;
  final Color goldTagBorder;
  final Color greenTagText;
  final Color greenTagBackground;
  final Color greenTagBorder;
  final Color limeTagText;
  final Color limeTagBackground;
  final Color limeTagBorder;
  final Color magentaTagText;
  final Color magentaTagBackground;
  final Color magentaTagBorder;
  final Color orangeTagText;
  final Color orangeTagBackground;
  final Color orangeTagBorder;
  final Color purpleTagText;
  final Color purpleTagBackground;
  final Color purpleTagBorder;
  final Color redTagText;
  final Color redTagBackground;
  final Color redTagBorder;
  final Color volcanoTagText;
  final Color volcanoTagBackground;
  final Color volcanoTagBorder;

  @override
  ExtendedTheme copyWith({
    // Semantic colors
    Color? defaultColor,
    Color? onDefault,
    Color? defaultContainer,
    Color? onDefaultContainer,
    Color? success,
    Color? onSuccess,
    Color? successContainer,
    Color? onSuccessContainer,
    Color? warning,
    Color? onWarning,
    Color? warningContainer,
    Color? onWarningContainer,
    Color? information,
    Color? onInformation,
    Color? informationContainer,
    Color? onInformationContainer,
    Color? critical,
    Color? onCritical,
    Color? criticalContainer,
    Color? onCriticalContainer,
    // Tag colors
    Color? blueTagText,
    Color? blueTagBackground,
    Color? blueTagBorder,
    Color? cyanTagText,
    Color? cyanTagBackground,
    Color? cyanTagBorder,
    Color? geekblueTagText,
    Color? geekblueTagBackground,
    Color? geekblueTagBorder,
    Color? goldTagText,
    Color? goldTagBackground,
    Color? goldTagBorder,
    Color? greenTagText,
    Color? greenTagBackground,
    Color? greenTagBorder,
    Color? limeTagText,
    Color? limeTagBackground,
    Color? limeTagBorder,
    Color? magentaTagText,
    Color? magentaTagBackground,
    Color? magentaTagBorder,
    Color? orangeTagText,
    Color? orangeTagBackground,
    Color? orangeTagBorder,
    Color? purpleTagText,
    Color? purpleTagBackground,
    Color? purpleTagBorder,
    Color? redTagText,
    Color? redTagBackground,
    Color? redTagBorder,
    Color? volcanoTagText,
    Color? volcanoTagBackground,
    Color? volcanoTagBorder,
  }) {
    return ExtendedTheme(
      // Semantic colors
      defaultColor: defaultColor ?? this.defaultColor,
      onDefault: onDefault ?? this.onDefault,
      defaultContainer: defaultContainer ?? this.defaultContainer,
      onDefaultContainer: onDefaultContainer ?? this.onDefaultContainer,
      success: success ?? this.success,
      onSuccess: onSuccess ?? this.onSuccess,
      successContainer: successContainer ?? this.successContainer,
      onSuccessContainer: onSuccessContainer ?? this.onSuccessContainer,
      warning: warning ?? this.warning,
      onWarning: onWarning ?? this.onWarning,
      warningContainer: warningContainer ?? this.warningContainer,
      onWarningContainer: onWarningContainer ?? this.onWarningContainer,
      information: information ?? this.information,
      onInformation: onInformation ?? this.onInformation,
      informationContainer: informationContainer ?? this.informationContainer,
      onInformationContainer: onInformationContainer ?? this.onInformationContainer,
      critical: critical ?? this.critical,
      onCritical: onCritical ?? this.onCritical,
      criticalContainer: criticalContainer ?? this.criticalContainer,
      onCriticalContainer: onCriticalContainer ?? this.onCriticalContainer,
      // Tag colors
      blueTagText: blueTagText ?? this.blueTagText,
      blueTagBackground: blueTagBackground ?? this.blueTagBackground,
      blueTagBorder: blueTagBorder ?? this.blueTagBorder,
      cyanTagText: cyanTagText ?? this.cyanTagText,
      cyanTagBackground: cyanTagBackground ?? this.cyanTagBackground,
      cyanTagBorder: cyanTagBorder ?? this.cyanTagBorder,
      geekblueTagText: geekblueTagText ?? this.geekblueTagText,
      geekblueTagBackground: geekblueTagBackground ?? this.geekblueTagBackground,
      geekblueTagBorder: geekblueTagBorder ?? this.geekblueTagBorder,
      goldTagText: goldTagText ?? this.goldTagText,
      goldTagBackground: goldTagBackground ?? this.goldTagBackground,
      goldTagBorder: goldTagBorder ?? this.goldTagBorder,
      greenTagText: greenTagText ?? this.greenTagText,
      greenTagBackground: greenTagBackground ?? this.greenTagBackground,
      greenTagBorder: greenTagBorder ?? this.greenTagBorder,
      limeTagText: limeTagText ?? this.limeTagText,
      limeTagBackground: limeTagBackground ?? this.limeTagBackground,
      limeTagBorder: limeTagBorder ?? this.limeTagBorder,
      magentaTagText: magentaTagText ?? this.magentaTagText,
      magentaTagBackground: magentaTagBackground ?? this.magentaTagBackground,
      magentaTagBorder: magentaTagBorder ?? this.magentaTagBorder,
      orangeTagText: orangeTagText ?? this.orangeTagText,
      orangeTagBackground: orangeTagBackground ?? this.orangeTagBackground,
      orangeTagBorder: orangeTagBorder ?? this.orangeTagBorder,
      purpleTagText: purpleTagText ?? this.purpleTagText,
      purpleTagBackground: purpleTagBackground ?? this.purpleTagBackground,
      purpleTagBorder: purpleTagBorder ?? this.purpleTagBorder,
      redTagText: redTagText ?? this.redTagText,
      redTagBackground: redTagBackground ?? this.redTagBackground,
      redTagBorder: redTagBorder ?? this.redTagBorder,
      volcanoTagText: volcanoTagText ?? this.volcanoTagText,
      volcanoTagBackground: volcanoTagBackground ?? this.volcanoTagBackground,
      volcanoTagBorder: volcanoTagBorder ?? this.volcanoTagBorder,
    );
  }

  @override
  ExtendedTheme lerp(ThemeExtension<ExtendedTheme>? other, double t) {
    if (other is! ExtendedTheme) return this;
    return ExtendedTheme(
      // Semantic colors
      defaultColor: Color.lerp(defaultColor, other.defaultColor, t) ?? defaultColor,
      onDefault: Color.lerp(onDefault, other.onDefault, t) ?? onDefault,
      defaultContainer: Color.lerp(defaultContainer, other.defaultContainer, t) ?? defaultContainer,
      onDefaultContainer: Color.lerp(onDefaultContainer, other.onDefaultContainer, t) ?? onDefaultContainer,
      success: Color.lerp(success, other.success, t) ?? success,
      onSuccess: Color.lerp(onSuccess, other.onSuccess, t) ?? onSuccess,
      successContainer: Color.lerp(successContainer, other.successContainer, t) ?? successContainer,
      onSuccessContainer: Color.lerp(onSuccessContainer, other.onSuccessContainer, t) ?? onSuccessContainer,
      warning: Color.lerp(warning, other.warning, t) ?? warning,
      onWarning: Color.lerp(onWarning, other.onWarning, t) ?? onWarning,
      warningContainer: Color.lerp(warningContainer, other.warningContainer, t) ?? warningContainer,
      onWarningContainer: Color.lerp(onWarningContainer, other.onWarningContainer, t) ?? onWarningContainer,
      information: Color.lerp(information, other.information, t) ?? information,
      onInformation: Color.lerp(onInformation, other.onInformation, t) ?? onInformation,
      informationContainer: Color.lerp(informationContainer, other.informationContainer, t) ?? informationContainer,
      onInformationContainer: Color.lerp(onInformationContainer, other.onInformationContainer, t) ?? onInformationContainer,
      critical: Color.lerp(critical, other.critical, t) ?? critical,
      onCritical: Color.lerp(onCritical, other.onCritical, t) ?? onCritical,
      criticalContainer: Color.lerp(criticalContainer, other.criticalContainer, t) ?? criticalContainer,
      onCriticalContainer: Color.lerp(onCriticalContainer, other.onCriticalContainer, t) ?? onCriticalContainer,
      // Tag colors
      blueTagText: Color.lerp(blueTagText, other.blueTagText, t) ?? blueTagText,
      blueTagBackground: Color.lerp(blueTagBackground, other.blueTagBackground, t) ?? blueTagBackground,
      blueTagBorder: Color.lerp(blueTagBorder, other.blueTagBorder, t) ?? blueTagBorder,
      cyanTagText: Color.lerp(cyanTagText, other.cyanTagText, t) ?? cyanTagText,
      cyanTagBackground: Color.lerp(cyanTagBackground, other.cyanTagBackground, t) ?? cyanTagBackground,
      cyanTagBorder: Color.lerp(cyanTagBorder, other.cyanTagBorder, t) ?? cyanTagBorder,
      geekblueTagText: Color.lerp(geekblueTagText, other.geekblueTagText, t) ?? geekblueTagText,
      geekblueTagBackground: Color.lerp(geekblueTagBackground, other.geekblueTagBackground, t) ?? geekblueTagBackground,
      geekblueTagBorder: Color.lerp(geekblueTagBorder, other.geekblueTagBorder, t) ?? geekblueTagBorder,
      goldTagText: Color.lerp(goldTagText, other.goldTagText, t) ?? goldTagText,
      goldTagBackground: Color.lerp(goldTagBackground, other.goldTagBackground, t) ?? goldTagBackground,
      goldTagBorder: Color.lerp(goldTagBorder, other.goldTagBorder, t) ?? goldTagBorder,
      greenTagText: Color.lerp(greenTagText, other.greenTagText, t) ?? greenTagText,
      greenTagBackground: Color.lerp(greenTagBackground, other.greenTagBackground, t) ?? greenTagBackground,
      greenTagBorder: Color.lerp(greenTagBorder, other.greenTagBorder, t) ?? greenTagBorder,
      limeTagText: Color.lerp(limeTagText, other.limeTagText, t) ?? limeTagText,
      limeTagBackground: Color.lerp(limeTagBackground, other.limeTagBackground, t) ?? limeTagBackground,
      limeTagBorder: Color.lerp(limeTagBorder, other.limeTagBorder, t) ?? limeTagBorder,
      magentaTagText: Color.lerp(magentaTagText, other.magentaTagText, t) ?? magentaTagText,
      magentaTagBackground: Color.lerp(magentaTagBackground, other.magentaTagBackground, t) ?? magentaTagBackground,
      magentaTagBorder: Color.lerp(magentaTagBorder, other.magentaTagBorder, t) ?? magentaTagBorder,
      orangeTagText: Color.lerp(orangeTagText, other.orangeTagText, t) ?? orangeTagText,
      orangeTagBackground: Color.lerp(orangeTagBackground, other.orangeTagBackground, t) ?? orangeTagBackground,
      orangeTagBorder: Color.lerp(orangeTagBorder, other.orangeTagBorder, t) ?? orangeTagBorder,
      purpleTagText: Color.lerp(purpleTagText, other.purpleTagText, t) ?? purpleTagText,
      purpleTagBackground: Color.lerp(purpleTagBackground, other.purpleTagBackground, t) ?? purpleTagBackground,
      purpleTagBorder: Color.lerp(purpleTagBorder, other.purpleTagBorder, t) ?? purpleTagBorder,
      redTagText: Color.lerp(redTagText, other.redTagText, t) ?? redTagText,
      redTagBackground: Color.lerp(redTagBackground, other.redTagBackground, t) ?? redTagBackground,
      redTagBorder: Color.lerp(redTagBorder, other.redTagBorder, t) ?? redTagBorder,
      volcanoTagText: Color.lerp(volcanoTagText, other.volcanoTagText, t) ?? volcanoTagText,
      volcanoTagBackground: Color.lerp(volcanoTagBackground, other.volcanoTagBackground, t) ?? volcanoTagBackground,
      volcanoTagBorder: Color.lerp(volcanoTagBorder, other.volcanoTagBorder, t) ?? volcanoTagBorder,
    );
  }
}`;
}

export function generateShareURL(theme: ThemeExport): string {
  // Encode theme data for URL sharing
  const themeData = btoa(JSON.stringify(theme));
  const baseUrl = window.location.origin;
  return `${baseUrl}?theme=${themeData}`;
}

export function copyToClipboard(text: string): Promise<void> {
  return navigator.clipboard.writeText(text);
}