import { ThemeExport } from '@/types/schema';
import { getExtendedHex } from '@/theme';

export function exportToJSON(theme: ThemeExport): void {
  const dataStr = JSON.stringify(theme, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = `${theme.themeName || 'material-theme'}.json`;
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export function exportToDart(theme: ThemeExport): void {
  const dartCode = generateDartCode(theme);
  const dataBlob = new Blob([dartCode], { type: 'text/plain' });
  
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = `${theme.themeName || 'material-theme'}.dart`;
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

function generateDartCode(theme: ThemeExport): string {
  const hexToInt = (hex: string): string => {
    return `0xFF${hex.substring(1).toUpperCase()}`;
  };

  return `// Generated by Material Theme Builder
// Theme: ${theme.themeName || 'Custom Material Theme'}
// Seed: ${theme.seed}

import 'package:flutter/material.dart';

class ${(theme.themeName || 'Custom').replace(/\s+/g, '')}Theme {
  static const String seed = '${theme.seed}';
  
  // Light Color Scheme
  static const ColorScheme lightColorScheme = ColorScheme.light(
    primary: Color(${hexToInt(theme.schemes.light.primary)}),
    onPrimary: Color(${hexToInt(theme.schemes.light.onPrimary)}),
    primaryContainer: Color(${hexToInt(theme.schemes.light.primaryContainer)}),
    onPrimaryContainer: Color(${hexToInt(theme.schemes.light.onPrimaryContainer)}),
    secondary: Color(${hexToInt(theme.schemes.light.secondary)}),
    onSecondary: Color(${hexToInt(theme.schemes.light.onSecondary)}),
    secondaryContainer: Color(${hexToInt(theme.schemes.light.secondaryContainer)}),
    onSecondaryContainer: Color(${hexToInt(theme.schemes.light.onSecondaryContainer)}),
    tertiary: Color(${hexToInt(theme.schemes.light.tertiary || '#7D5260')}),
    onTertiary: Color(${hexToInt(theme.schemes.light.onTertiary || '#FFFFFF')}),
    tertiaryContainer: Color(${hexToInt(theme.schemes.light.tertiaryContainer || '#FFD8E4')}),
    onTertiaryContainer: Color(${hexToInt(theme.schemes.light.onTertiaryContainer || '#31111D')}),
    error: Color(${hexToInt(theme.schemes.light.error)}),
    onError: Color(${hexToInt(theme.schemes.light.onError)}),
    errorContainer: Color(${hexToInt(theme.schemes.light.errorContainer)}),
    onErrorContainer: Color(${hexToInt(theme.schemes.light.onErrorContainer)}),
    surface: Color(${hexToInt(theme.schemes.light.surface)}),
    onSurface: Color(${hexToInt(theme.schemes.light.onSurface)}),
    background: Color(${hexToInt(theme.schemes.light.background)}),
    onBackground: Color(${hexToInt(theme.schemes.light.onBackground)}),
    outline: Color(${hexToInt(theme.schemes.light.outline)}),
    outlineVariant: Color(${hexToInt(theme.schemes.light.outlineVariant)}),
  );

  // Dark Color Scheme
  static const ColorScheme darkColorScheme = ColorScheme.dark(
    primary: Color(${hexToInt(theme.schemes.dark.primary)}),
    onPrimary: Color(${hexToInt(theme.schemes.dark.onPrimary)}),
    primaryContainer: Color(${hexToInt(theme.schemes.dark.primaryContainer)}),
    onPrimaryContainer: Color(${hexToInt(theme.schemes.dark.onPrimaryContainer)}),
    secondary: Color(${hexToInt(theme.schemes.dark.secondary)}),
    onSecondary: Color(${hexToInt(theme.schemes.dark.onSecondary)}),
    secondaryContainer: Color(${hexToInt(theme.schemes.dark.secondaryContainer)}),
    onSecondaryContainer: Color(${hexToInt(theme.schemes.dark.onSecondaryContainer)}),
    tertiary: Color(${hexToInt(theme.schemes.dark.tertiary || '#EFB8C8')}),
    onTertiary: Color(${hexToInt(theme.schemes.dark.onTertiary || '#492532')}),
    tertiaryContainer: Color(${hexToInt(theme.schemes.dark.tertiaryContainer || '#633B48')}),
    onTertiaryContainer: Color(${hexToInt(theme.schemes.dark.onTertiaryContainer || '#FFD8E4')}),
    error: Color(${hexToInt(theme.schemes.dark.error)}),
    onError: Color(${hexToInt(theme.schemes.dark.onError)}),
    errorContainer: Color(${hexToInt(theme.schemes.dark.errorContainer)}),
    onErrorContainer: Color(${hexToInt(theme.schemes.dark.onErrorContainer)}),
    surface: Color(${hexToInt(theme.schemes.dark.surface)}),
    onSurface: Color(${hexToInt(theme.schemes.dark.onSurface)}),
    background: Color(${hexToInt(theme.schemes.dark.background)}),
    onBackground: Color(${hexToInt(theme.schemes.dark.onBackground)}),
    outline: Color(${hexToInt(theme.schemes.dark.outline)}),
    outlineVariant: Color(${hexToInt(theme.schemes.dark.outlineVariant)}),
  );

  // Light Theme Data
  static ThemeData get lightTheme => ThemeData(
    useMaterial3: true,
    colorScheme: lightColorScheme,
    extensions: [lightCustomTheme],
  );

  // Dark Theme Data
  static ThemeData get darkTheme => ThemeData(
    useMaterial3: true,
    colorScheme: darkColorScheme,
    extensions: [darkCustomTheme],
  );

  // Custom Enum Theme Extensions
  static const CustomEnumTheme lightCustomTheme = CustomEnumTheme(
    warningText: Color(${hexToInt(getExtendedHex(theme, "warningText") || "#000000")}),
    warningBackground: Color(${hexToInt(getExtendedHex(theme, "warningBackground") || "#000000")}),
    warningBorder: Color(${hexToInt(getExtendedHex(theme, "warningBorder") || "#000000")}),
    successText: Color(${hexToInt(getExtendedHex(theme, "successText") || "#000000")}),
    successBackground: Color(${hexToInt(getExtendedHex(theme, "successBackground") || "#000000")}),
    successBorder: Color(${hexToInt(getExtendedHex(theme, "successBorder") || "#000000")}),
    informationText: Color(${hexToInt(getExtendedHex(theme, "informationText") || "#000000")}),
    informationBackground: Color(${hexToInt(getExtendedHex(theme, "informationBackground") || "#000000")}),
    informationBorder: Color(${hexToInt(getExtendedHex(theme, "informationBorder") || "#000000")}),
    criticalText: Color(${hexToInt(getExtendedHex(theme, "criticalText") || "#000000")}),
    criticalBackground: Color(${hexToInt(getExtendedHex(theme, "criticalBackground") || "#000000")}),
    criticalBorder: Color(${hexToInt(getExtendedHex(theme, "criticalBorder") || "#000000")}),
  );

  static const CustomEnumTheme darkCustomTheme = CustomEnumTheme(
    warningText: Color(${hexToInt(getExtendedHex(theme, "warningText") || "#000000")}),
    warningBackground: Color(${hexToInt(getExtendedHex(theme, "warningBackground") || "#000000")}),
    warningBorder: Color(${hexToInt(getExtendedHex(theme, "warningBorder") || "#000000")}),
    successText: Color(${hexToInt(getExtendedHex(theme, "successText") || "#000000")}),
    successBackground: Color(${hexToInt(getExtendedHex(theme, "successBackground") || "#000000")}),
    successBorder: Color(${hexToInt(getExtendedHex(theme, "successBorder") || "#000000")}),
    informationText: Color(${hexToInt(getExtendedHex(theme, "informationText") || "#000000")}),
    informationBackground: Color(${hexToInt(getExtendedHex(theme, "informationBackground") || "#000000")}),
    informationBorder: Color(${hexToInt(getExtendedHex(theme, "informationBorder") || "#000000")}),
    criticalText: Color(${hexToInt(getExtendedHex(theme, "criticalText") || "#000000")}),
    criticalBackground: Color(${hexToInt(getExtendedHex(theme, "criticalBackground") || "#000000")}),
    criticalBorder: Color(${hexToInt(getExtendedHex(theme, "criticalBorder") || "#000000")}),
  );
}

// Custom Theme Extension Class
class CustomEnumTheme extends ThemeExtension<CustomEnumTheme> {
  const CustomEnumTheme({
    required this.warningText,
    required this.warningBackground,
    required this.warningBorder,
    required this.successText,
    required this.successBackground,
    required this.successBorder,
    required this.informationText,
    required this.informationBackground,
    required this.informationBorder,
    required this.criticalText,
    required this.criticalBackground,
    required this.criticalBorder,
  });

  final Color warningText;
  final Color warningBackground;
  final Color warningBorder;
  final Color successText;
  final Color successBackground;
  final Color successBorder;
  final Color informationText;
  final Color informationBackground;
  final Color informationBorder;
  final Color criticalText;
  final Color criticalBackground;
  final Color criticalBorder;

  @override
  CustomEnumTheme copyWith({
    Color? warningText,
    Color? warningBackground,
    Color? warningBorder,
    Color? successText,
    Color? successBackground,
    Color? successBorder,
    Color? informationText,
    Color? informationBackground,
    Color? informationBorder,
    Color? criticalText,
    Color? criticalBackground,
    Color? criticalBorder,
  }) {
    return CustomEnumTheme(
      warningText: warningText ?? this.warningText,
      warningBackground: warningBackground ?? this.warningBackground,
      warningBorder: warningBorder ?? this.warningBorder,
      successText: successText ?? this.successText,
      successBackground: successBackground ?? this.successBackground,
      successBorder: successBorder ?? this.successBorder,
      informationText: informationText ?? this.informationText,
      informationBackground: informationBackground ?? this.informationBackground,
      informationBorder: informationBorder ?? this.informationBorder,
      criticalText: criticalText ?? this.criticalText,
      criticalBackground: criticalBackground ?? this.criticalBackground,
      criticalBorder: criticalBorder ?? this.criticalBorder,
    );
  }

  @override
  CustomEnumTheme lerp(ThemeExtension<CustomEnumTheme>? other, double t) {
    if (other is! CustomEnumTheme) return this;
    return CustomEnumTheme(
      warningText: Color.lerp(warningText, other.warningText, t) ?? warningText,
      warningBackground: Color.lerp(warningBackground, other.warningBackground, t) ?? warningBackground,
      warningBorder: Color.lerp(warningBorder, other.warningBorder, t) ?? warningBorder,
      successText: Color.lerp(successText, other.successText, t) ?? successText,
      successBackground: Color.lerp(successBackground, other.successBackground, t) ?? successBackground,
      successBorder: Color.lerp(successBorder, other.successBorder, t) ?? successBorder,
      informationText: Color.lerp(informationText, other.informationText, t) ?? informationText,
      informationBackground: Color.lerp(informationBackground, other.informationBackground, t) ?? informationBackground,
      informationBorder: Color.lerp(informationBorder, other.informationBorder, t) ?? informationBorder,
      criticalText: Color.lerp(criticalText, other.criticalText, t) ?? criticalText,
      criticalBackground: Color.lerp(criticalBackground, other.criticalBackground, t) ?? criticalBackground,
      criticalBorder: Color.lerp(criticalBorder, other.criticalBorder, t) ?? criticalBorder,
    );
  }
}`;
}

export function generateShareURL(theme: ThemeExport): string {
  // Encode theme data for URL sharing
  const themeData = btoa(JSON.stringify(theme));
  const baseUrl = window.location.origin;
  return `${baseUrl}?theme=${themeData}`;
}

export function copyToClipboard(text: string): Promise<void> {
  return navigator.clipboard.writeText(text);
}