import { ThemeExport } from '@/types/schema';

export function exportToJSON(theme: ThemeExport): void {
  const dataStr = JSON.stringify(theme, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = `${theme.themeName || 'material-theme'}.json`;
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export function exportToDart(theme: ThemeExport): void {
  const dartCode = generateDartCode(theme);
  const dataBlob = new Blob([dartCode], { type: 'text/plain' });
  
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = `${theme.themeName || 'material-theme'}.dart`;
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

function generateDartCode(theme: ThemeExport): string {
  const hexToInt = (hex: string): string => {
    return `0xFF${hex.substring(1).toUpperCase()}`;
  };

  // Helper function to get extended color by name
  const getExtendedHex = (name: string): string => {
    const found = theme.extendedColors.find(ec => ec.name === name);
    return found?.color || '#FFFFFF';
  };

  // Generate tag colors for Dart code
  const generateTagColors = (scheme: 'light' | 'dark'): string => {
    const tagNames = ['blue', 'cyan', 'geekblue', 'gold', 'green', 'lime', 'magenta', 'orange', 'purple', 'red', 'volcano'];
    
    return tagNames.map(tagName => `    ${tagName}TagText: Color(${hexToInt(getExtendedHex(`${tagName}TagText`))}),
    ${tagName}TagBackground: Color(${hexToInt(getExtendedHex(`${tagName}TagBackground`))}),
    ${tagName}TagBorder: Color(${hexToInt(getExtendedHex(`${tagName}TagBorder`))}),`).join('\n');
  };

  return `// Generated by Material Theme Builder
// Theme: ${theme.themeName || 'Custom Material Theme'}
// Seed: ${theme.seed}

import 'package:flutter/material.dart';

class ${(theme.themeName || 'Custom').replace(/\s+/g, '')}Theme {
  static const String seed = '${theme.seed}';
  
  // Light Color Scheme
  static const ColorScheme lightColorScheme = ColorScheme.light(
    primary: Color(${hexToInt(theme.schemes.light.primary)}),
    onPrimary: Color(${hexToInt(theme.schemes.light.onPrimary)}),
    primaryContainer: Color(${hexToInt(theme.schemes.light.primaryContainer)}),
    onPrimaryContainer: Color(${hexToInt(theme.schemes.light.onPrimaryContainer)}),
    secondary: Color(${hexToInt(theme.schemes.light.secondary)}),
    onSecondary: Color(${hexToInt(theme.schemes.light.onSecondary)}),
    secondaryContainer: Color(${hexToInt(theme.schemes.light.secondaryContainer)}),
    onSecondaryContainer: Color(${hexToInt(theme.schemes.light.onSecondaryContainer)}),
    tertiary: Color(${hexToInt(theme.schemes.light.tertiary)}),
    onTertiary: Color(${hexToInt(theme.schemes.light.onTertiary)}),
    tertiaryContainer: Color(${hexToInt(theme.schemes.light.tertiaryContainer)}),
    onTertiaryContainer: Color(${hexToInt(theme.schemes.light.onTertiaryContainer)}),
    error: Color(${hexToInt(theme.schemes.light.error)}),
    onError: Color(${hexToInt(theme.schemes.light.onError)}),
    errorContainer: Color(${hexToInt(theme.schemes.light.errorContainer)}),
    onErrorContainer: Color(${hexToInt(theme.schemes.light.onErrorContainer)}),
    surface: Color(${hexToInt(theme.schemes.light.surface)}),
    onSurface: Color(${hexToInt(theme.schemes.light.onSurface)}),
    surfaceVariant: Color(${hexToInt(theme.schemes.light.surfaceVariant)}),
    onSurfaceVariant: Color(${hexToInt(theme.schemes.light.onSurfaceVariant)}),
    surfaceDim: Color(${hexToInt(theme.schemes.light.surfaceDim)}),
    surfaceBright: Color(${hexToInt(theme.schemes.light.surfaceBright)}),
    surfaceContainer: Color(${hexToInt(theme.schemes.light.surfaceContainer)}),
    surfaceContainerLow: Color(${hexToInt(theme.schemes.light.surfaceContainerLow)}),
    surfaceContainerHigh: Color(${hexToInt(theme.schemes.light.surfaceContainerHigh)}),
    surfaceContainerHighest: Color(${hexToInt(theme.schemes.light.surfaceContainerHighest)}),
    background: Color(${hexToInt(theme.schemes.light.background)}),
    onBackground: Color(${hexToInt(theme.schemes.light.onBackground)}),
    outline: Color(${hexToInt(theme.schemes.light.outline)}),
    outlineVariant: Color(${hexToInt(theme.schemes.light.outlineVariant)}),
  );

  // Dark Color Scheme
  static const ColorScheme darkColorScheme = ColorScheme.dark(
    primary: Color(${hexToInt(theme.schemes.dark.primary)}),
    onPrimary: Color(${hexToInt(theme.schemes.dark.onPrimary)}),
    primaryContainer: Color(${hexToInt(theme.schemes.dark.primaryContainer)}),
    onPrimaryContainer: Color(${hexToInt(theme.schemes.dark.onPrimaryContainer)}),
    secondary: Color(${hexToInt(theme.schemes.dark.secondary)}),
    onSecondary: Color(${hexToInt(theme.schemes.dark.onSecondary)}),
    secondaryContainer: Color(${hexToInt(theme.schemes.dark.secondaryContainer)}),
    onSecondaryContainer: Color(${hexToInt(theme.schemes.dark.onSecondaryContainer)}),
    tertiary: Color(${hexToInt(theme.schemes.dark.tertiary)}),
    onTertiary: Color(${hexToInt(theme.schemes.dark.onTertiary)}),
    tertiaryContainer: Color(${hexToInt(theme.schemes.dark.tertiaryContainer)}),
    onTertiaryContainer: Color(${hexToInt(theme.schemes.dark.onTertiaryContainer)}),
    error: Color(${hexToInt(theme.schemes.dark.error)}),
    onError: Color(${hexToInt(theme.schemes.dark.onError)}),
    errorContainer: Color(${hexToInt(theme.schemes.dark.errorContainer)}),
    onErrorContainer: Color(${hexToInt(theme.schemes.dark.onErrorContainer)}),
    surface: Color(${hexToInt(theme.schemes.dark.surface)}),
    onSurface: Color(${hexToInt(theme.schemes.dark.onSurface)}),
    surfaceVariant: Color(${hexToInt(theme.schemes.dark.surfaceVariant)}),
    onSurfaceVariant: Color(${hexToInt(theme.schemes.dark.onSurfaceVariant)}),
    surfaceDim: Color(${hexToInt(theme.schemes.dark.surfaceDim)}),
    surfaceBright: Color(${hexToInt(theme.schemes.dark.surfaceBright)}),
    surfaceContainer: Color(${hexToInt(theme.schemes.dark.surfaceContainer)}),
    surfaceContainerLow: Color(${hexToInt(theme.schemes.dark.surfaceContainerLow)}),
    surfaceContainerHigh: Color(${hexToInt(theme.schemes.dark.surfaceContainerHigh)}),
    surfaceContainerHighest: Color(${hexToInt(theme.schemes.dark.surfaceContainerHighest)}),
    background: Color(${hexToInt(theme.schemes.dark.background)}),
    onBackground: Color(${hexToInt(theme.schemes.dark.onBackground)}),
    outline: Color(${hexToInt(theme.schemes.dark.outline)}),
    outlineVariant: Color(${hexToInt(theme.schemes.dark.outlineVariant)}),
  );

  // Light Theme Data
  static ThemeData get lightTheme => ThemeData(
    useMaterial3: true,
    colorScheme: lightColorScheme,
    extensions: [lightExtendedTheme],
  );

  // Dark Theme Data
  static ThemeData get darkTheme => ThemeData(
    useMaterial3: true,
    colorScheme: darkColorScheme,
    extensions: [darkExtendedTheme],
  );

  // Extended Theme Extensions
  static const ExtendedTheme lightExtendedTheme = ExtendedTheme(
    // Semantic colors
    defaultColor: Color(${hexToInt(getExtendedHex('defaultColor'))}),
    onDefault: Color(${hexToInt(getExtendedHex('onDefault'))}),
    defaultContainer: Color(${hexToInt(getExtendedHex('defaultContainer'))}),
    onDefaultContainer: Color(${hexToInt(getExtendedHex('onDefaultContainer'))}),
    success: Color(${hexToInt(getExtendedHex('success'))}),
    onSuccess: Color(${hexToInt(getExtendedHex('onSuccess'))}),
    successContainer: Color(${hexToInt(getExtendedHex('successContainer'))}),
    onSuccessContainer: Color(${hexToInt(getExtendedHex('onSuccessContainer'))}),
    warning: Color(${hexToInt(getExtendedHex('warning'))}),
    onWarning: Color(${hexToInt(getExtendedHex('onWarning'))}),
    warningContainer: Color(${hexToInt(getExtendedHex('warningContainer'))}),
    onWarningContainer: Color(${hexToInt(getExtendedHex('onWarningContainer'))}),
    information: Color(${hexToInt(getExtendedHex('information'))}),
    onInformation: Color(${hexToInt(getExtendedHex('onInformation'))}),
    informationContainer: Color(${hexToInt(getExtendedHex('informationContainer'))}),
    onInformationContainer: Color(${hexToInt(getExtendedHex('onInformationContainer'))}),
    // Tag colors
${generateTagColors('light')}
  );

  static const ExtendedTheme darkExtendedTheme = ExtendedTheme(
    // Semantic colors
    defaultColor: Color(${hexToInt(getExtendedHex('defaultColor'))}),
    onDefault: Color(${hexToInt(getExtendedHex('onDefault'))}),
    defaultContainer: Color(${hexToInt(getExtendedHex('defaultContainer'))}),
    onDefaultContainer: Color(${hexToInt(getExtendedHex('onDefaultContainer'))}),
    success: Color(${hexToInt(getExtendedHex('success'))}),
    onSuccess: Color(${hexToInt(getExtendedHex('onSuccess'))}),
    successContainer: Color(${hexToInt(getExtendedHex('successContainer'))}),
    onSuccessContainer: Color(${hexToInt(getExtendedHex('onSuccessContainer'))}),
    warning: Color(${hexToInt(getExtendedHex('warning'))}),
    onWarning: Color(${hexToInt(getExtendedHex('onWarning'))}),
    warningContainer: Color(${hexToInt(getExtendedHex('warningContainer'))}),
    onWarningContainer: Color(${hexToInt(getExtendedHex('onWarningContainer'))}),
    information: Color(${hexToInt(getExtendedHex('information'))}),
    onInformation: Color(${hexToInt(getExtendedHex('onInformation'))}),
    informationContainer: Color(${hexToInt(getExtendedHex('informationContainer'))}),
    onInformationContainer: Color(${hexToInt(getExtendedHex('onInformationContainer'))}),
    // Tag colors
${generateTagColors('dark')}
  );
}
`;
}

export function generateShareURL(theme: ThemeExport): string {
  const themeData = btoa(JSON.stringify(theme));
  const baseUrl = window.location.origin;
  return `${baseUrl}?theme=${themeData}`;
}

export function copyToClipboard(text: string): Promise<void> {
  return navigator.clipboard.writeText(text);
}
