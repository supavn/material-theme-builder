import { ThemeExport } from "@shared/schema";

export function exportToJSON(theme: ThemeExport): void {
  const dataStr = JSON.stringify(theme, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = `${theme.themeName || 'material-theme'}.json`;
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export function exportToDart(theme: ThemeExport): void {
  const dartCode = generateDartCode(theme);
  const dataBlob = new Blob([dartCode], { type: 'text/plain' });
  
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = `${theme.themeName || 'material-theme'}.dart`;
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

function generateDartCode(theme: ThemeExport): string {
  const hexToInt = (hex: string): string => {
    return `0xFF${hex.substring(1).toUpperCase()}`;
  };

  return `// Generated by Material Theme Builder
// Theme: ${theme.themeName || 'Custom Material Theme'}
// Seed: ${theme.seed}

import 'package:flutter/material.dart';

class ${(theme.themeName || 'Custom').replace(/\s+/g, '')}Theme {
  static const String seed = '${theme.seed}';
  
  // Light Color Scheme
  static const ColorScheme lightColorScheme = ColorScheme.light(
    primary: Color(${hexToInt(theme.schemes.light.primary)}),
    onPrimary: Color(${hexToInt(theme.schemes.light.onPrimary)}),
    primaryContainer: Color(${hexToInt(theme.schemes.light.primaryContainer)}),
    onPrimaryContainer: Color(${hexToInt(theme.schemes.light.onPrimaryContainer)}),
    secondary: Color(${hexToInt(theme.schemes.light.secondary)}),
    onSecondary: Color(${hexToInt(theme.schemes.light.onSecondary)}),
    secondaryContainer: Color(${hexToInt(theme.schemes.light.secondaryContainer)}),
    onSecondaryContainer: Color(${hexToInt(theme.schemes.light.onSecondaryContainer)}),
    tertiary: Color(${hexToInt(theme.schemes.light.tertiary || '#7D5260')}),
    onTertiary: Color(${hexToInt(theme.schemes.light.onTertiary || '#FFFFFF')}),
    tertiaryContainer: Color(${hexToInt(theme.schemes.light.tertiaryContainer || '#FFD8E4')}),
    onTertiaryContainer: Color(${hexToInt(theme.schemes.light.onTertiaryContainer || '#31111D')}),
    error: Color(${hexToInt(theme.schemes.light.error)}),
    onError: Color(${hexToInt(theme.schemes.light.onError)}),
    errorContainer: Color(${hexToInt(theme.schemes.light.errorContainer)}),
    onErrorContainer: Color(${hexToInt(theme.schemes.light.onErrorContainer)}),
    surface: Color(${hexToInt(theme.schemes.light.surface)}),
    onSurface: Color(${hexToInt(theme.schemes.light.onSurface)}),
    background: Color(${hexToInt(theme.schemes.light.background)}),
    onBackground: Color(${hexToInt(theme.schemes.light.onBackground)}),
    outline: Color(${hexToInt(theme.schemes.light.outline)}),
    outlineVariant: Color(${hexToInt(theme.schemes.light.outlineVariant)}),
  );

  // Dark Color Scheme
  static const ColorScheme darkColorScheme = ColorScheme.dark(
    primary: Color(${hexToInt(theme.schemes.dark.primary)}),
    onPrimary: Color(${hexToInt(theme.schemes.dark.onPrimary)}),
    primaryContainer: Color(${hexToInt(theme.schemes.dark.primaryContainer)}),
    onPrimaryContainer: Color(${hexToInt(theme.schemes.dark.onPrimaryContainer)}),
    secondary: Color(${hexToInt(theme.schemes.dark.secondary)}),
    onSecondary: Color(${hexToInt(theme.schemes.dark.onSecondary)}),
    secondaryContainer: Color(${hexToInt(theme.schemes.dark.secondaryContainer)}),
    onSecondaryContainer: Color(${hexToInt(theme.schemes.dark.onSecondaryContainer)}),
    tertiary: Color(${hexToInt(theme.schemes.dark.tertiary || '#EFB8C8')}),
    onTertiary: Color(${hexToInt(theme.schemes.dark.onTertiary || '#492532')}),
    tertiaryContainer: Color(${hexToInt(theme.schemes.dark.tertiaryContainer || '#633B48')}),
    onTertiaryContainer: Color(${hexToInt(theme.schemes.dark.onTertiaryContainer || '#FFD8E4')}),
    error: Color(${hexToInt(theme.schemes.dark.error)}),
    onError: Color(${hexToInt(theme.schemes.dark.onError)}),
    errorContainer: Color(${hexToInt(theme.schemes.dark.errorContainer)}),
    onErrorContainer: Color(${hexToInt(theme.schemes.dark.onErrorContainer)}),
    surface: Color(${hexToInt(theme.schemes.dark.surface)}),
    onSurface: Color(${hexToInt(theme.schemes.dark.onSurface)}),
    background: Color(${hexToInt(theme.schemes.dark.background)}),
    onBackground: Color(${hexToInt(theme.schemes.dark.onBackground)}),
    outline: Color(${hexToInt(theme.schemes.dark.outline)}),
    outlineVariant: Color(${hexToInt(theme.schemes.dark.outlineVariant)}),
  );

  // Light Theme Data
  static ThemeData get lightTheme => ThemeData(
    useMaterial3: true,
    colorScheme: lightColorScheme,
    extensions: [lightCustomTheme],
  );

  // Dark Theme Data
  static ThemeData get darkTheme => ThemeData(
    useMaterial3: true,
    colorScheme: darkColorScheme,
    extensions: [darkCustomTheme],
  );

  // Custom Enum Theme Extensions
  static const CustomEnumTheme lightCustomTheme = CustomEnumTheme(
    warning: Color(${hexToInt(theme.schemes.light.warning)}),
    onWarning: Color(${hexToInt(theme.schemes.light.onWarning)}),
    warningContainer: Color(${hexToInt(theme.schemes.light.warningContainer)}),
    onWarningContainer: Color(${hexToInt(theme.schemes.light.onWarningContainer)}),
    success: Color(${hexToInt(theme.schemes.light.success)}),
    onSuccess: Color(${hexToInt(theme.schemes.light.onSuccess)}),
    successContainer: Color(${hexToInt(theme.schemes.light.successContainer)}),
    onSuccessContainer: Color(${hexToInt(theme.schemes.light.onSuccessContainer)}),
    information: Color(${hexToInt(theme.schemes.light.information)}),
    onInformation: Color(${hexToInt(theme.schemes.light.onInformation)}),
    informationContainer: Color(${hexToInt(theme.schemes.light.informationContainer)}),
    onInformationContainer: Color(${hexToInt(theme.schemes.light.onInformationContainer)}),
    critical: Color(${hexToInt(theme.schemes.light.critical)}),
    onCritical: Color(${hexToInt(theme.schemes.light.onCritical)}),
  );

  static const CustomEnumTheme darkCustomTheme = CustomEnumTheme(
    warning: Color(${hexToInt(theme.schemes.dark.warning)}),
    onWarning: Color(${hexToInt(theme.schemes.dark.onWarning)}),
    warningContainer: Color(${hexToInt(theme.schemes.dark.warningContainer)}),
    onWarningContainer: Color(${hexToInt(theme.schemes.dark.onWarningContainer)}),
    success: Color(${hexToInt(theme.schemes.dark.success)}),
    onSuccess: Color(${hexToInt(theme.schemes.dark.onSuccess)}),
    successContainer: Color(${hexToInt(theme.schemes.dark.successContainer)}),
    onSuccessContainer: Color(${hexToInt(theme.schemes.dark.onSuccessContainer)}),
    information: Color(${hexToInt(theme.schemes.dark.information)}),
    onInformation: Color(${hexToInt(theme.schemes.dark.onInformation)}),
    informationContainer: Color(${hexToInt(theme.schemes.dark.informationContainer)}),
    onInformationContainer: Color(${hexToInt(theme.schemes.dark.onInformationContainer)}),
    critical: Color(${hexToInt(theme.schemes.dark.critical)}),
    onCritical: Color(${hexToInt(theme.schemes.dark.onCritical)}),
  );
}

// Custom Theme Extension Class
class CustomEnumTheme extends ThemeExtension<CustomEnumTheme> {
  const CustomEnumTheme({
    required this.warning,
    required this.onWarning,
    required this.warningContainer,
    required this.onWarningContainer,
    required this.success,
    required this.onSuccess,
    required this.successContainer,
    required this.onSuccessContainer,
    required this.information,
    required this.onInformation,
    required this.informationContainer,
    required this.onInformationContainer,
    required this.critical,
    required this.onCritical,
  });

  final Color warning;
  final Color onWarning;
  final Color warningContainer;
  final Color onWarningContainer;
  final Color success;
  final Color onSuccess;
  final Color successContainer;
  final Color onSuccessContainer;
  final Color information;
  final Color onInformation;
  final Color informationContainer;
  final Color onInformationContainer;
  final Color critical;
  final Color onCritical;

  @override
  CustomEnumTheme copyWith({
    Color? warning,
    Color? onWarning,
    Color? warningContainer,
    Color? onWarningContainer,
    Color? success,
    Color? onSuccess,
    Color? successContainer,
    Color? onSuccessContainer,
    Color? information,
    Color? onInformation,
    Color? informationContainer,
    Color? onInformationContainer,
    Color? critical,
    Color? onCritical,
  }) {
    return CustomEnumTheme(
      warning: warning ?? this.warning,
      onWarning: onWarning ?? this.onWarning,
      warningContainer: warningContainer ?? this.warningContainer,
      onWarningContainer: onWarningContainer ?? this.onWarningContainer,
      success: success ?? this.success,
      onSuccess: onSuccess ?? this.onSuccess,
      successContainer: successContainer ?? this.successContainer,
      onSuccessContainer: onSuccessContainer ?? this.onSuccessContainer,
      information: information ?? this.information,
      onInformation: onInformation ?? this.onInformation,
      informationContainer: informationContainer ?? this.informationContainer,
      onInformationContainer: onInformationContainer ?? this.onInformationContainer,
      critical: critical ?? this.critical,
      onCritical: onCritical ?? this.onCritical,
    );
  }

  @override
  CustomEnumTheme lerp(ThemeExtension<CustomEnumTheme>? other, double t) {
    if (other is! CustomEnumTheme) return this;
    return CustomEnumTheme(
      warning: Color.lerp(warning, other.warning, t) ?? warning,
      onWarning: Color.lerp(onWarning, other.onWarning, t) ?? onWarning,
      warningContainer: Color.lerp(warningContainer, other.warningContainer, t) ?? warningContainer,
      onWarningContainer: Color.lerp(onWarningContainer, other.onWarningContainer, t) ?? onWarningContainer,
      success: Color.lerp(success, other.success, t) ?? success,
      onSuccess: Color.lerp(onSuccess, other.onSuccess, t) ?? onSuccess,
      successContainer: Color.lerp(successContainer, other.successContainer, t) ?? successContainer,
      onSuccessContainer: Color.lerp(onSuccessContainer, other.onSuccessContainer, t) ?? onSuccessContainer,
      information: Color.lerp(information, other.information, t) ?? information,
      onInformation: Color.lerp(onInformation, other.onInformation, t) ?? onInformation,
      informationContainer: Color.lerp(informationContainer, other.informationContainer, t) ?? informationContainer,
      onInformationContainer: Color.lerp(onInformationContainer, other.onInformationContainer, t) ?? onInformationContainer,
      critical: Color.lerp(critical, other.critical, t) ?? critical,
      onCritical: Color.lerp(onCritical, other.onCritical, t) ?? onCritical,
    );
  }
}`;
}

export function generateShareURL(theme: ThemeExport): string {
  // Encode theme data for URL sharing
  const themeData = btoa(JSON.stringify(theme));
  const baseUrl = window.location.origin;
  return `${baseUrl}?theme=${themeData}`;
}

export function copyToClipboard(text: string): Promise<void> {
  return navigator.clipboard.writeText(text);
}